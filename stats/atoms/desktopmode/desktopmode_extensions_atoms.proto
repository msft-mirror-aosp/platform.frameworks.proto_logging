/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";

package android.os.statsd.desktopmode;
option java_package = "com.android.os.desktopmode";

import "frameworks/proto_logging/stats/atoms.proto";
import "frameworks/proto_logging/stats/atom_field_options.proto";

extend Atom {
  optional DesktopModeUIChanged desktop_mode_ui_changed = 818 [(module) = "framework"];
  optional DesktopModeSessionTaskUpdate desktop_mode_session_task_update = 819 [(module) = "framework"];
  optional DesktopModeTaskSizeUpdated desktop_mode_task_size_updated = 935 [(module) = "framework"];
}

/**
* Logged when there is a change to the Desktop mode UI
*
* Logged from
* frameworks/base/libs/WindowManager/Shell/src/com/android/wm/shell/desktopmode/DesktopModeEventLogger.kt
*/
message DesktopModeUIChanged {
  // User interactions with desktopmode
  enum  Event {
    UNKNOWN_EVENT = 0;
    ENTER = 1;
    EXIT = 2;
  }

  // The reason for entering desktopmode
  enum  EnterReason {
    UNKNOWN_ENTER = 0;
    OVERVIEW = 1;
    APP_HANDLE_DRAG = 2;
    APP_HANDLE_MENU_BUTTON = 3;
    APP_FREEFORM_INTENT = 4; // This covers intent based starts from app-shortcut, taskbar, keyboard shortcuts where we don't use any custom transition
    KEYBOARD_SHORTCUT_ENTER = 5;
    SCREEN_ON = 6; // desktop mode visible after screen turned on
    APP_FROM_OVERVIEW = 7;
  }

  // The reason for exiting desktopmode
  enum  ExitReason {
    UNKNOWN_EXIT = 0;
    DRAG_TO_EXIT = 1;
    APP_HANDLE_MENU_BUTTON_EXIT = 2;
    KEYBOARD_SHORTCUT_EXIT = 3;
    RETURN_HOME_OR_OVERVIEW = 4; // user swiped up to go to overview, or home screen
    TASK_FINISHED = 5; // the task finished or dismissed
    SCREEN_OFF = 6;
  }

  optional Event event = 1;
  // What triggered desktopmode (if the event is ENTER)
  optional EnterReason enter_reason = 2;
  // What triggered leaving desktopmode (if the event is EXIT)
  optional ExitReason exit_reason = 3;
  // An id used to identify a desktop mode instance
  optional int32 session_id = 4;
}

/**
* Logged when there is a task update in the desktop mode session
*
* Logged from
* frameworks/base/libs/WindowManager/Shell/src/com/android/wm/shell/desktopmode/DesktopModeEventLogger.kt
*/
message DesktopModeSessionTaskUpdate {
  // The kind of the app event
  enum TaskEvent {
    UNKNOWN_TASK_EVENT = 0;
    TASK_ADDED = 1;
    TASK_REMOVED = 2;
    TASK_INFO_CHANGED = 3; // covers both size and position changes of the app
  }

  // The reason a task was minimized
  enum MinimizeReason {
    // Unset means the task did not get minimized
    UNSET_MINIMIZE = 0;
    MINIMIZE_TASK_LIMIT = 1;
    MINIMIZE_BUTTON = 2;
  }

  // The reason a task was unminimized
  enum UnminimizeReason {
    // Unset means the task did not get minimized
    UNSET_UNMINIMIZE = 0;
    // Unknown means we don't know what caused the unminimize action
    UNMINIMIZE_UNKNOWN = 1;
    UNMINIMIZE_TASKBAR_TAP = 2;
    UNMINIMIZE_ALT_TAB = 3;
    UNMINIMIZE_TASK_LAUNCH = 4;
  }

  // The event associated with this app update
  optional TaskEvent task_event = 1;
  // The instance_id of this task
  optional int32 instance_id = 2;
  // The uid of the app associated with this task
  optional int32 uid = 3 [(is_uid) = true];
  // The height of this task in px
  optional int32 task_height = 4;
  // The width of this task in px
  optional int32 task_width = 5;
  // the x-coordinate of the top-left corner
  optional int32 task_x = 6;
  // the y-coordinate of the top-right corner
  optional int32 task_y = 7;
  // An id used to identify a desktop mode instance
  optional int32 session_id = 8;
  // The reason the task was minimized
  optional MinimizeReason minimize_reason = 9;
  // The reason the task was unminimized
  optional UnminimizeReason unminimize_reason = 10;
  // The number of visible tasks
  optional int32 visible_task_count = 11 [
    (state_field_option).exclusive_state = true,
    (state_field_option).nested = false
  ];
}

/**
* Logged when a task size is updated (resizing, snapping or maximizing to
* stable bounds) during a desktop mode session.
*
* Logged from
* frameworks/base/libs/WindowManager/Shell/src/com/android/wm/shell/desktopmode/DesktopModeEventLogger.kt
*/
message DesktopModeTaskSizeUpdated {
  // The trigger for task resize
  enum ResizeTrigger {
    UNKNOWN_RESIZE_TRIGGER = 0;
    // Resize task from its corner bounds
    CORNER_RESIZE_TRIGGER = 1;
    // Resize task from its edges
    EDGE_RESIZE_TRIGGER = 2;
    // Resize two tiled apps simultaneously using the divider
    TILING_DIVIDER_RESIZE_TRIGGER = 3;
    // Resize task to fit the stable bounds by clicking on the maximize button
    // on the app header
    MAXIMIZE_BUTTON_RESIZE_TRIGGER = 4;
    // Resize task to fit the stable bounds by double tapping the app header
    DOUBLE_TAP_APP_HEADER_RESIZE_TRIGGER = 5;
    // Snap a resizable task to the left half of the screen by dragging the task
    // to the left
    DRAG_LEFT_RESIZE_TRIGGER = 6;
    // Snap a resizable task to the right half of the screen by dragging the
    // task to the right
    DRAG_RIGHT_RESIZE_TRIGGER = 7;
    // Snap a resizable task to the left half of the screen by clicking on the
    // snap left menu on the app header
    SNAP_LEFT_MENU_RESIZE_TRIGGER = 8;
    // Snap a resizable task to the right half of the screen by clicking on the
    // snap right menu on the app header
    SNAP_RIGHT_MENU_RESIZE_TRIGGER = 9;
  }

  // The stage at which a task is being resized
  enum ResizingStage {
    UNKNOWN_RESIZING_STAGE = 0;
    // Stage before the task was resized
    START_RESIZING_STAGE = 1;
    // Stage when task resize is complete
    END_RESIZING_STAGE = 2;
  }

  // The input method for resizing the task
  enum InputMethod {
    UNKNOWN_INPUT_METHOD = 0;
    TOUCH_INPUT_METHOD = 1;
    STYLUS_INPUT_METHOD = 2;
    MOUSE_INPUT_METHOD = 3;
    TOUCHPAD_INPUT_METHOD = 4;
    // Only tiling and maximizing window actions have keyboard shortcuts
    KEYBOARD_INPUT_METHOD = 5;
  }

  // How this task was resized
  optional ResizeTrigger resize_trigger = 1;
  // The stage of resizing this task
  optional ResizingStage resizing_stage = 2;
  // The input method for resizing this task
  optional InputMethod input_method = 3;
  // ID used to identify the Desktop mode session
  optional int32 desktop_mode_session_id = 4;
  // The instance_id of this task
  optional int32 instance_id = 5;
  // The UID of the app associated with this task
  optional int32 uid = 6 [(is_uid) = true];
  // The height of this task in dp
  optional int32 task_height = 7;
  // The width of this task in dp
  optional int32 task_width = 8;
  // The display area of the device in dp^2
  optional int32 display_area = 9;
}
